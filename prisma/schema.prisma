// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  student
  worker
  supervisor
}

model User {
  id        String      @id @default(uuid())
  firstName String
  lastName  String
  email     String      @unique
  code      String      @unique
  password  String
  role      UserRole
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Category  Category?
  Report    Report[]
  Asignment Asignment[]
}

model Category {
  id           String   @id @default(uuid())
  name         String   @unique
  description  String
  supervisor   User     @relation(fields: [supervisorId], references: [id])
  supervisorId String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Report       Report[]
}

enum Priority {
  low
  medium
  high
}

enum Status {
  pending
  in_progress
  completed
}

model Report {
  id          String        @id @default(uuid())
  student     User          @relation(fields: [studentId], references: [id])
  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  String
  studentId   String
  title       String
  description String
  priority    Priority
  status      Status
  location    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  photos      ReportPhoto[]
  Asignment   Asignment[]
  Evidence    Evidence[]
}

model ReportPhoto {
  id        String   @id @default(uuid())
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId  String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Asignment {
  id        String   @id @default(uuid())
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId  String
  worker    User     @relation(fields: [workerId], references: [id])
  workerId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Evidence {
  id            String          @id @default(uuid())
  report        Report          @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  EvidencePhoto EvidenceImage[]
}

model EvidenceImage {
  id         String   @id @default(uuid())
  evidence   Evidence @relation(fields: [evidenceId], references: [id], onDelete: Cascade)
  evidenceId String
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
